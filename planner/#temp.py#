@login_required
def course_schedule(request):
    """Display daily schedules for the department"""

    user = request.user
    user_preferences = user.user_preferences.all()[0]

    department = user_preferences.department_to_view
    academic_year = user_preferences.academic_year_to_view.begin_on.year
    academic_year_string = str(academic_year)+'-'+str(academic_year+1)

# things that are currently hard-coded and could/should be fixed:
# - earliest course is 7 a.m.
# - hard-coded the semester "exclusion" list...could pass it instead
#
# NEED TO CHECK FOR COURSE TIME CONFLICTS!!!!!!!
#

    semester_names_to_exclude = [u'Summer']

    semester_list = []
    for semester in SemesterName.objects.all():
        if semester.name not in semester_names_to_exclude:
            semester_list.append(semester.name)

    num_data_columns = 5
    weekdays = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']

    data_list =[]
    idnum = 0
    courseid = 0

    for subject in department.subjects.all():
        for course in subject.courses.all(): #filter(offerings__semester__year__begin_on__year = academic_year):
            co = course.offerings.filter(semester__year__begin_on__year = academic_year)
            if len(co) > 0:
                co_semester_list=[]
                for co_item in co:
                    co_semester_list.append(co_item.semester.name.name)
                data_this_course = []
                courseid=courseid+1
                for semester_name in semester_list:
                    if semester_name in co_semester_list:
                        courses_after_five = False
                        idnum = idnum + 1

                        if semester_name == semester_list[0]:
                            table_title = course.title+' ('+semester_name+', '+str(academic_year)+')'
                        else:
                            table_title = course.title+' ('+semester_name+', '+str(academic_year+1)+')'

                        for sc in ScheduledClass.objects.filter(Q(course_offering__course = course)&
                                                                Q(course_offering__semester__name__name=semester_name)&
                                                                Q(course_offering__semester__year__begin_on__year = academic_year)):
                            if sc.end_at.hour > 16:
                                courses_after_five = True

                        schedule = initialize_canvas_data(courses_after_five, num_data_columns)

                        grid_list, filled_row_list, table_text_list = create_schedule_grid(schedule, weekdays, 'MWF')
                        table_text_list.append([schedule['width']/2,schedule['border']/2,
                                                table_title,
                                                schedule['table_title_font'],
                                                schedule['table_header_text_colour']])

                        box_list = []
                        box_label_list = []
                        for sc in ScheduledClass.objects.filter(Q(course_offering__course = course)&
                                                                Q(course_offering__semester__name__name=semester_name)&
                                                                Q(course_offering__semester__year__begin_on__year = academic_year)):
                            box_data, course_data, room_data = rectangle_coordinates_schedule(schedule, sc, sc.day)
                            box_list.append(box_data)
                            box_label_list.append(course_data)
                            box_label_list.append(room_data)


                            # format for filled rectangles is: [xleft, ytop, width, height, fillcolour, linewidth, bordercolour]
                            # format for text is: [xcenter, ycenter, text_string, font, text_colour]

                        json_box_list = simplejson.dumps(box_list)
                        json_box_label_list = simplejson.dumps(box_label_list)
                        json_grid_list = simplejson.dumps(grid_list)
                        json_filled_row_list = simplejson.dumps(filled_row_list)
                        json_table_text_list = simplejson.dumps(table_text_list)

                        id = 'id'+str(idnum)
                        data_this_course.append({'course_id':courseid,
                                                 'course_name': course.subject.abbrev+' '+course.number+': '+course.title,
                                                 'json_box_list': json_box_list,
                                                 'json_box_label_list':json_box_label_list,
                                                 'json_grid_list': json_grid_list,
                                                 'json_filled_row_list': json_filled_row_list,
                                                 'json_table_text_list': json_table_text_list,
                                                 'id':id,
                                                 'schedule':schedule})
                data_list.append(data_this_course)

    context={'data_list':data_list, 'year':academic_year_string}
    return render(request, 'course_schedule.html', context)
